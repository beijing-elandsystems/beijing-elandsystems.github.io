<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beijing Elandsystems Tech News</title>
    <link>http://beijing-elandsystems.github.io/</link>
    <description>Recent content on Beijing Elandsystems Tech News</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Apr 2016 09:51:06 +0800</lastBuildDate>
    <atom:link href="http://beijing-elandsystems.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>150413</title>
      <link>http://beijing-elandsystems.github.io/post/150413/</link>
      <pubDate>Thu, 14 Apr 2016 09:51:06 +0800</pubDate>
      
      <guid>http://beijing-elandsystems.github.io/post/150413/</guid>
      <description>

&lt;h2 id=&#34;本周-packege:422fd56ba662109dd232da50cc9c0393&#34;&gt;本周 packege&lt;/h2&gt;

&lt;h3 id=&#34;imageprocessor:422fd56ba662109dd232da50cc9c0393&#34;&gt;ImageProcessor&lt;/h3&gt;

&lt;p&gt;有些时候，在服务器上处理图片会更好，
比如，图片中放置任意的watermark时、当场制作thumbnail时、
或者需要将gallery上的图片做黑白处理显示。
这样的话，服务器上就需要一个工具来动态处理图片了，
由于是服务器上直接处理，当然速度要快，要是能有效地使用multi-core CPU则更好。&lt;/p&gt;

&lt;p&gt;这种情况可以使用James South做的ImageProcessor library。
它是轻小的、快速的、简单的，且考虑到了multi-threading而有扩展性，
而且还支持.NET Core。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://imageprocessor.org/&#34;&gt;ImageProcessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://imageprocessor.org/imageprocessor/imagefactory/&#34;&gt;ImageProcessor Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下代码是读取JPEG图片文件后，编辑为横向150 pixel、纵向根据大小调整比率并保存到memory stream的方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byte[] photoBytes = File.ReadAllBytes(file);
ISupportedImageFormat format = new JpegFormat { Quality = 70 };
Size size = new Size(150, 0)
using (MemoryStream inStream = new MemoryStream(photoBytes))
{
    using (MemoryStream outStream = new MemoryStream())
    {
        using (ImageFactory imageFactory = new ImageFactory(preserveExifData:true))
        {
            imageFactory.Load(inStream)
                        .Resize(size)
                        .Format(format)
                        .Save(outStream);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;net-消息:422fd56ba662109dd232da50cc9c0393&#34;&gt;.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.simple-talk.com/dotnet/visual-studio/debugging-and-profiling-in-visual-studio-2015/&#34;&gt;Debugging and Profiling in Visual Studio 2015&lt;/a&gt; : Manuel Meyer 说明了提供于Visual Studio 2015的调试及prfiling功能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://gregorsuttie.com/2016/01/19/tips-for-deploying-your-net-project/&#34;&gt;Tips for deploying your .NET project&lt;/a&gt; : Gregor Suttie 共享了通过发布.NET项目经验获得的Tip。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Immo Landwerth 共享了&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/02/10/porting-to-net-core/&#34;&gt;将之前的 .NET 代码移植为 .NET Core 的方法&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;asp-net-消息:422fd56ba662109dd232da50cc9c0393&#34;&gt;ASP.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://dotnetliberty.com/index.php/2015/12/28/asp-net-5-scoped-dependencies/&#34;&gt;ASP.NET 5 scoped dependencies&lt;/a&gt; : Armen Shimoon对ASP.NET 5里默认内置的DI(Dependency Injection) 功能中的 Scoped 方式进行了详细说明。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.twilio.com/blog/2015/12/hola-ip-messaging-real-time-translated-chat-with-asp-net-microsoft-translator-and-ip-messaging.html&#34;&gt;Real time translated chat with ASP.NET, Microsoft Translator and IP Messaging&lt;/a&gt; : Devin Rader 介绍了通过 &lt;a href=&#34;http://www.microsoft.com/en-us/translator/translatorapi.aspx&#34;&gt;Microsoft Translator API&lt;/a&gt; 来实时翻译聊天信息的方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://capesean.co.za/blog/asp-net-5-jwt-tokens/&#34;&gt;Setting up ASP.NET v5 (vNext) to use JWT tokens (using OpenIddict)&lt;/a&gt; : Capesean说明了在ASP.NET v5 中使用 JWT token 的方法。(参考：JWT token作为认证当事人之间公开的安全表现索赔方法的一种业界标准，目前RFC 7519中有详细说明。)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://weblog.west-wind.com/posts/2016/Jan/25/FontAwesome-Fonts-and-Mime-Types-in-IIS-and-other-Web-Servers&#34;&gt;FontAwesome fonts and MIME types in IIS and other web servers&lt;/a&gt; : FontAwesome solution可以帮助其用text方式制作icon。 Rick Strahl 说明了在有IIS的各种 web 服务器中设置MIME type 的方法。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>150406</title>
      <link>http://beijing-elandsystems.github.io/post/150406/</link>
      <pubDate>Wed, 06 Apr 2016 23:22:54 +0800</pubDate>
      
      <guid>http://beijing-elandsystems.github.io/post/150406/</guid>
      <description>

&lt;h2 id=&#34;本周-package:80656b7efe032c9381042fa60c037ce3&#34;&gt;本周 package&lt;/h2&gt;

&lt;h3 id=&#34;polly:80656b7efe032c9381042fa60c037ce3&#34;&gt;Polly&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/App-vNext/Polly&#34;&gt;Polly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;发生短暂 exception 时，&lt;code&gt;Polly&lt;/code&gt; 会提供多样的 API，使其以 Retry, Retry Forever, Wait and Retry, Circuit Breaker 等方式进行处理。&lt;/p&gt;

&lt;p&gt;以下是用 &lt;code&gt;Polly&lt;/code&gt; 实现的逻辑代码：
当客户端程序访问远程服务失败时，过一段时间后试图再访问。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;await Policy
 .Handle&amp;lt;TimeoutException&amp;gt;()
 .Or&amp;lt;HttpException&amp;gt;(ex =&amp;gt; ex.WebEventCode == WebEventCodes.RuntimeErrorRequestAbort)
 .WaitAndRetryAsync(new[] {1.Seconds(), 5.Seconds()})
 .ExecuteAsync(() =&amp;gt; DoSomethingAsync());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;net-消息:80656b7efe032c9381042fa60c037ce3&#34;&gt;.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://build.microsoft.com/&#34;&gt;Build 2016&lt;/a&gt; : 承载着许多令人震惊的消息的微软开发活动&lt;strong&gt;Build 2016&lt;/strong&gt;隆重收尾，&lt;a href=&#34;https://channel9.msdn.com/&#34;&gt;channel9&lt;/a&gt;中可以重新回顾所有Build 2016 的 session。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.xamarin.com/xamarin-for-all&#34;&gt;Xamarin for Everyone&lt;/a&gt; : 微软收购 Xamarin 的一个月内，免费发布Xamarin 提供给所有人使用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://techcrunch.com/2016/03/30/be-very-afraid-hell-has-frozen-over-bash-is-coming-to-windows-10/&#34;&gt;Microsoft is bringing the Bash shell to Windows 10&lt;/a&gt; : 微软表示将以window 10 update提供Bash Shell，Bash Shell是在 Linux和OS X中使用的，而 MS 目前为止使用的是自己的PowerShell。并且说明了可以以Native（而不是虚拟）使用 Ubuntu 的所有环境。(&lt;a href=&#34;http://fossbytes.com/microsoft-canonical-bring-ubuntu-linux-on-windows-10/&#34;&gt;Ubuntu Linux Is Coming To Windows 10&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.xamarin.com/cross-platform-messaging-for-ios-android-and-windows/&#34;&gt;Cross-Platform Messaging for iOS, Android, and Windows&lt;/a&gt; : Pierce Boggan 介绍了Xamarin及Window用的 Library，并在Xamarin开发者的博客上共享了可以通过这个实现SMS短信发送、打电话、发送邮件等功能的多平台(iOS, Android, and Windows) 信息插件的使用方法。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;asp-net-消息:80656b7efe032c9381042fa60c037ce3&#34;&gt;ASP.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.dotnetcurry.com/aspnet-mvc/1261/custom-model-binder-aspnet-mvc&#34;&gt;Custom Model Binder in ASP.NET MVC&lt;/a&gt; : Mahesh Sabni 介绍了Custom Model Binder如何根据 ASP.NET MVC model 的申请与数据匹配提供相应规律的实现方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.elanderson.net/2016/03/dependency-injection-conditional-registration-in-asp-net-core/&#34;&gt;Dependency Injection Conditional Registration in ASP.NET Core&lt;/a&gt; : Eric L. Anderson 介绍了在 ASP.NET Core 中 Dependency Injection的多种使用方式。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://rehansaeed.com/social-taghelpers-for-asp-net-core/&#34;&gt;Social TagHelpers for ASP.NET Core&lt;/a&gt; : Muhammad Rehan Saeed 共享了在 ASP.NET Core 中通过 Facebook, Twitter, Google+, Pintrest 等网站共享page时使用的meta tag相关内容。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>150330</title>
      <link>http://beijing-elandsystems.github.io/post/150330/</link>
      <pubDate>Tue, 29 Mar 2016 15:14:51 +0800</pubDate>
      
      <guid>http://beijing-elandsystems.github.io/post/150330/</guid>
      <description>

&lt;h2 id=&#34;本周-package:d9d74926076dfbc67699f7f088be8a8a&#34;&gt;本周 Package&lt;/h2&gt;

&lt;h3 id=&#34;bogus:d9d74926076dfbc67699f7f088be8a8a&#34;&gt;Bogus&lt;/h3&gt;

&lt;p&gt;有时候制作 Test code 时，需要一些临时数据来做测试。
命名变量名就已经很困惑，再加上要生成临时数据，对开发者负担会更多。
Bogus就是在此时使用的library。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bchavez/Bogus&#34;&gt;Bogus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bogus是 &lt;a href=&#34;https://github.com/bchavez&#34;&gt;Brian Chavez&lt;/a&gt;制作的library，其功能是在生成Class的Instance时，以类似于实际的信息填充文本、图片等多样的数据类型值。
下面是使用Bogus，生成任意用户数据的代码例子：&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;userFaker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Faker&amp;lt;User&amp;gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #75715e&#34;&gt;// User has a constructor that takes a user id and a social security number&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.CustomInstantiator(f&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;User(userIds++,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f.Random.Replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;###-##-####&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)))&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.RuleFor(u&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u.FirstName,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f.Name.FirstName())&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.RuleFor(u&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u.LastName,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f.Name.LastName())&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.RuleFor(u&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u.Avatar,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f.Internet.Avatar())&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.RuleFor(u&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u.Email,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(f,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f.Internet.Email(u.FirstName,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u.LastName))&lt;/span&gt;
   &lt;span style=&#34;color: #75715e&#34;&gt;//Use an enum&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.RuleFor(u&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u.Gender,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f.PickRandom&amp;lt;Gender&amp;gt;());&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;userFaker.Generate();&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// The created user can look like this:&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; &amp;quot;Id&amp;quot;: 0,&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; &amp;quot;FirstName&amp;quot;: &amp;quot;Audrey&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; &amp;quot;LastName&amp;quot;: &amp;quot;Spencer&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; &amp;quot;Email&amp;quot;: &amp;quot;Audrey82@gmail.com&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; &amp;quot;Avatar&amp;quot;: &amp;quot;https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; &amp;quot;SSN&amp;quot;: &amp;quot;923-88-4231&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; &amp;quot;Gender&amp;quot;: 0&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;net-资讯:d9d74926076dfbc67699f7f088be8a8a&#34;&gt;.NET 资讯&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于在.NET 里也适用的并行处理，Erik Bergman 通过&lt;a href=&#34;http://www.erikbergman.net/2016/03/10/high-speed-applications-parallelism-in-net-part-1/&#34;&gt;part 1&lt;/a&gt; 和 &lt;a href=&#34;http://www.erikbergman.net/2016/03/17/high-speed-applications-parallelism-in-net-part-2/&#34;&gt;part 2&lt;/a&gt;进行了说明。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.simple-talk.com/blogs/2016/02/26/conditionalweaktable-and-dynamic-properties-in-net-4/&#34;&gt;ConditionalWeakTable and dynamic properties in .NET 4+&lt;/a&gt; : Chris Whitworth 介绍了在 .NET Framework 4.0 中涉及的 ConditionalWeakTable&lt;TKey, TValue&gt; 类。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ayende Rahien在自己的博客中共享了有助于非同步程序开发的&lt;a href=&#34;https://ayende.com/blog/173473/fun-async-tricks-for-getting-better-performance&#34;&gt;Fun async tricks for getting better performance&lt;/a&gt; 和依赖性管理相关内容的&lt;a href=&#34;https://ayende.com/blog/173377/dependencies-management-in-a-crisis?Key=1d4d9b27-fc86-451d-bd4f-2da16b5cfad3&#34;&gt;Dependency management in a crisis&lt;/a&gt;文档。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;asp-net-资讯:d9d74926076dfbc67699f7f088be8a8a&#34;&gt;ASP.NET 资讯&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/1078249/RESTful-Web-API-Help-Documentation-using-Swagger-U&#34;&gt;RESTful Web API Help Documentation using Swagger UI and Swashbuckle&lt;/a&gt; : Sreekanth Mothukuru 利用 Swagger UI 和 Swashbuckle ，共享了制作 RESTful Web API 帮助文档的方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.simple-talk.com/dotnet/asp.net/keeping-post-and-get-separated/&#34;&gt;Keeping POST and GET Separated&lt;/a&gt; : Dino Esposito 在自己的博客中共享了分离 HTTP 中 POST 与 GET 的 PRG(Post-Redirect-Get) pattern相关的文章。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://weblog.west-wind.com/posts/2016/Feb/22/Using-Lets-Encrypt-with-IIS-on-Windows&#34;&gt;Using Let’s Encrypt with IIS on Windows&lt;/a&gt; : Rick Strahl 介绍了opensource认证书 Let’s Encrypt，并且说明了设置到 IIS的方法。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他:d9d74926076dfbc67699f7f088be8a8a&#34;&gt;其他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.devbattles.com/en/sand/post-1298-31+Of+The+Best+Kept+Secrets+Of+Great+Programmers&#34;&gt;31 Of The Best Kept Secrets Of Great Programmers&lt;/a&gt;: 讲述了成为伟大编程师的31种方法。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>150323</title>
      <link>http://beijing-elandsystems.github.io/post/150323/</link>
      <pubDate>Tue, 22 Mar 2016 16:05:35 +0800</pubDate>
      
      <guid>http://beijing-elandsystems.github.io/post/150323/</guid>
      <description>

&lt;h2 id=&#34;本周-package:6041939a368c5c2f76e2a81c344d50eb&#34;&gt;本周 package&lt;/h2&gt;

&lt;h3 id=&#34;dapper-dot-net:6041939a368c5c2f76e2a81c344d50eb&#34;&gt;Dapper-dot-net&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackexchange.github.io/dapper-dot-net/&#34;&gt;Dapper-dot-net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.NET中能使用的 ORM(Object-Relational Mapper)很多，
其中Stack Overflow 组开发的Dapper是少数以单纯访问方式进行的ORM之一。
使用它时，性能方面也可以与直接使用SqlDataReader时的速度相媲美。&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Dog&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Age&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;float?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Weight&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;            

&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dogs&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;connection.Query&amp;lt;Dog&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;select Age = @Age&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Age&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;howManyDogs&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dogs.Count();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstDogWeight&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dogs.First().Weight;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;net-消息:6041939a368c5c2f76e2a81c344d50eb&#34;&gt;.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.microsoft.com/blog/2016/03/07/announcing-sql-server-on-linux/&#34;&gt;SQL Server on Linux&lt;/a&gt;:
Microsoft 的SQL Server 预计支持 Linux。
虽然目前阶段只是preview版本，但是其目标是在2017年中旬公开正式版本。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://thebillwagner.com/Blog/Item/2016-03-02-C7FeatureProposalLocalFunctions&#34;&gt;C# 7 Feature Proposal: Local Functions&lt;/a&gt;:
Bill Wagner 介绍了要包含至 C# 7.0 版本的功能。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;asp-net-消息:6041939a368c5c2f76e2a81c344d50eb&#34;&gt;ASP.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aspnetmonsters.com/2016/03/2016-02-28-what-is-middleware-anyway/&#34;&gt;What is middleware anyway?&lt;/a&gt;:
Simon Timms 介绍了 ASP.NET Core 中经常涉及到的 Middleware的概念。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.infragistics.com/community/blogs/dhananjay_kumar/archive/2016/03/04/how-to-create-a-custom-action-filter-in-asp-net-mvc.aspx&#34;&gt;How to Create a Custom Action Filter in ASP.NET MVC&lt;/a&gt;:
Dhananjay Kumar 说明了在 ASP.NET MVC 中实现Custom Action Filter的方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.exceptionnotfound.net/custom-validation-in-asp-net-web-api-with-fluentvalidation/&#34;&gt;Custom Validation in ASP.NET Web API with FluentValidation&lt;/a&gt; :
Matthew Jones 介绍了为了验证用户所输入值是否有效而使用的FluentValidation library API。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他:6041939a368c5c2f76e2a81c344d50eb&#34;&gt;其他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b&#34;&gt;State of the Art JavaScript in 2016&lt;/a&gt; :
Javascript这个领域是变化无常的，它不断地在推出许多框架和技术，
而Francois Ward在这里介绍了2016年Javascript 的开发趋势。
他在本文结尾，特别强调了不能因为是广泛使用的技术就一味使用它，
而是要有取决性地根据需求使用。 (&lt;em&gt;If you don’t need it, don’t use it&lt;/em&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/8-ways-to-become-a-better-coder&#34;&gt;8 Ways to Become a Better Coder&lt;/a&gt;:
Esther Schindler提供了怎样成为更优秀的开发者的方法。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>150317</title>
      <link>http://beijing-elandsystems.github.io/post/150317/</link>
      <pubDate>Tue, 15 Mar 2016 21:49:02 +0800</pubDate>
      
      <guid>http://beijing-elandsystems.github.io/post/150317/</guid>
      <description>

&lt;h2 id=&#34;本周-package:cbebda548ae1db85ab246595f2267af6&#34;&gt;本周 package&lt;/h2&gt;

&lt;h3 id=&#34;restsharp:cbebda548ae1db85ab246595f2267af6&#34;&gt;RestSharp&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/restsharp/RestSharp&#34;&gt;RestSharp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用 REST API时，不像对象 Serialization 或用户认证一样单单用标准 HTTP 技术就能解决所有问题，
而 RestSharp 便是为此提供的，是一种实现使用 REST API 时所需的功能的 .NET library。&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RestClient(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// client.Authenticator = new HttpBasicAuthenticator(username, password);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RestRequest(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;resource/{id}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Method.POST);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;request.AddParameter(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// adds to POST or URL querystring based on Method&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;request.AddUrlSegment(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// replaces matching token in request.Resource&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// easily add HTTP Headers&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;request.AddHeader(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// add files to upload (works with compatible verbs)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;request.AddFile(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path);&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// execute the request&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;IRestResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;client.Execute(request);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;response.Content;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// raw content as string&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// async with deserialization&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;asyncHandle&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;client.ExecuteAsync&amp;lt;Person&amp;gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Console.WriteLine(response.Data.Name);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;automapper:cbebda548ae1db85ab246595f2267af6&#34;&gt;AutoMapper&lt;/h3&gt;

&lt;p&gt;AutoMapper 是方便匹配对象之间的数据的 library。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AutoMapper/AutoMapper&#34;&gt;AutoMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般情况下 UI 领域中使用的数据对象和 Domain 领域中使用的数据对象不相同。
虽然制作服务逻辑时是用 Domain 对象，但是多数情况最终往页面传送时是以DTO(&lt;em&gt;Data Transfer Object&lt;/em&gt;) 方式传送。
若使用 AutoMapper ，则在互不相同的 Layer 之间也能轻松传送数据对象间的值。&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MapperConfiguration(cfg&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cfg.CreateMap&amp;lt;Order,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;OrderDto&amp;gt;());&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mapper&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;config.CreateMapper();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;OrderDto&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dto&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mapper.Map&amp;lt;OrderDto&amp;gt;(order);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;net-消息:cbebda548ae1db85ab246595f2267af6&#34;&gt;.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://developer.telerik.com/featured/the-era-of-portable-net/&#34;&gt;The Era of Portable .NET&lt;/a&gt; : 随着 .NET支持multi-platform 环境，PCL(Portable Class Library) 项目类型有了新的可能性。Sam Basu 对此做了详细说明。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/&#34;&gt;StackOverflow, the architecture 2016 edition&lt;/a&gt; : Nick Craver 共享了 &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; 网站的最新架构。
StackOverflow 作为开发者之间提问及共享解决方案的网页，有很多人在使用。那么我们一起看一下每天平均处理2亿Request，并且接收3TB信息的StackOverflow的架构吧。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://petabridge.com/blog/introduction-to-nbench/&#34;&gt;Introducing NBench – an Automated Performance Testing Framework for .NET Applications&lt;/a&gt; : Petabridge中说明了自动化性能测试框架&amp;ndash;NBench。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;asp-net-消息:cbebda548ae1db85ab246595f2267af6&#34;&gt;ASP.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;David Paquette, James Chambers, Simon Timms 在 Channel 9 的 ASP.NET Monsters Channel 中，连载了&lt;a href=&#34;https://channel9.msdn.com/Series/aspnetmonsters?sort=recent#tab_sortBy_recent&#34;&gt;利用 ASP.NET Core 开发应用程序的方法系列&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codeclimber.net.nz/archive/2016/03/04/Introduction-to-ASP-NET-Core-1-0-video.aspx&#34;&gt;Introduction to ASP.NET Core (video)&lt;/a&gt; : Simone Chiarett 说明了 ASP.NET Core 的安装方法和用ASP.NET Core v1.0 制作简单网站的方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ageofascent.com/asp-net-core-exeeds-1-15-million-requests-12-6-gbps/&#34;&gt;ASP.NET Core – 2300% More Requests Served Per Second&lt;/a&gt; : Ben Adams 共享了比 ASP.NET 性能更高的 ASP.NET Core 的性能测定结果和其意义。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.hanselman.com/blog/BestPracticesForPrivateConfigDataAndConnectionStringsInConfigurationInASPNETAndAzure.aspx&#34;&gt;Best practices for private config data and connection strings in configuration in ASP.NET and Azure&lt;/a&gt; : Scott Hanselman 介绍了在 Azure 上的 ASP.NET web 应用程序中保管像 connection string一样敏感的内部数据的最佳方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://lockmedown.com/preventing-sensitive-data-exposure-aspnet-part1/&#34;&gt;Preventing sensitive data exposure in ASP.NET Part 1, Part 2&lt;/a&gt; : Max R McCarty 通过 &lt;a href=&#34;http://lockmedown.com/preventing-sensitive-data-exposure-aspnet-part1/&#34;&gt;Part 1&lt;/a&gt; 和 &lt;a href=&#34;http://lockmedown.com/preventing-sensitive-data-exposure-aspnet-part2/&#34;&gt;Part 2&lt;/a&gt; 共享了如何简单地管理及保护 ASP.NET 应用中不能外泄的敏感用户数据的方法。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他:cbebda548ae1db85ab246595f2267af6&#34;&gt;其他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.csharpstar.com/top-20-google-amazon-programming-interview-questions/&#34;&gt;Top 20 Google &amp;amp; Amazon Programming Interview Questions&lt;/a&gt;: 谷歌、亚马逊等世界级 IT 企业面试 C# 开发者时，最常问的技术性问题。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>150310</title>
      <link>http://beijing-elandsystems.github.io/post/150310/</link>
      <pubDate>Thu, 10 Mar 2016 00:13:59 +0800</pubDate>
      
      <guid>http://beijing-elandsystems.github.io/post/150310/</guid>
      <description>

&lt;h2 id=&#34;本周-package:fc9e1c937c4cd04790f433d6effbc270&#34;&gt;本周 package&lt;/h2&gt;

&lt;h3 id=&#34;htmlagilitypack:fc9e1c937c4cd04790f433d6effbc270&#34;&gt;HtmlAgilityPack&lt;/h3&gt;

&lt;p&gt;有时候会需要从HTML 文档抽取信息。
由于 HTML 也是 XML 形式的文档，所以可以简单地直接制作 Parser，或者使用 Regular Expression。
但是比起这两种方式，通过专业的 HTML Parser 使用 DOM 来抽取会更好，
而 HtmlAgilityPack library 就是为此提供的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/HtmlAgilityPack/&#34;&gt;HtmlAgilityPack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;httpClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HttpClient();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;httpClient.GetStringAsync(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://blogs.msdn.com/b/dotnet/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dom&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HtmlDocument();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;dom.LoadHtml(html);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;imageUrls&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dom.DocumentNode&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.SelectNodes(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;//img&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Select(n&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;n.Attributes[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].Value)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Distinct();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;imageUrls)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;Console.WriteLine(url);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;anglesharp:fc9e1c937c4cd04790f433d6effbc270&#34;&gt;AngleSharp&lt;/h3&gt;

&lt;p&gt;AngleSharp library与使用 XPath 方式的 HtmlAgilityPack 不同，
它支持CSS，它会经常更新，以便支持最新技术。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/AngleSharp/&#34;&gt;AngleSharp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过 HtmlAgilityPack liarary 制作的功能，用 AngleSharp 实现的代码如下：&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Configuration.Default.WithDefaultLoader();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BrowsingContext.New(config);&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dom&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;context.OpenAsync(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://blogs.msdn.com/b/dotnet/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;imageUrls&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dom&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.QuerySelectorAll(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Select(n&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;n.Attributes[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].Value)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Distinct();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;imageUrls)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;Console.WriteLine(url);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;verbalexpressions:fc9e1c937c4cd04790f433d6effbc270&#34;&gt;VerbalExpressions&lt;/h3&gt;

&lt;p&gt;读/写/调试 Regular Expression 是较难的，
而 VerbalExpressions liarary 可以帮助 Regular Expression 写得更简易。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/VerbalExpressions/CSharpVerbalExpressions&#34;&gt;VerbalExpressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;verbEx&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VerbalExpressions()&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.StartOfLine()&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Then(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Maybe(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Then(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;://&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.Maybe(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;www.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.AnythingBut(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.EndOfLine();&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;Assert.IsTrue(verbEx.Test(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;https://www.microsoft.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 Regular Expression 语法也是可以的，
只是通过 VerbalExpressions 可以写可读性更强的代码。&lt;/p&gt;

&lt;h2 id=&#34;net-消息:fc9e1c937c4cd04790f433d6effbc270&#34;&gt;.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async&#34;&gt;Six Essential Tips for Async&lt;/a&gt; : 这是 2年前的视频了，现在很难找到像 Lucian Wischik 一样详细的 Async 说明视频。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://haacked.com/archive/2015/12/16/to-string-or-not/&#34;&gt;To String or to string&lt;/a&gt; : C# 开发者可能每个人都曾想过，&lt;code&gt;System.String&lt;/code&gt; 和 &lt;code&gt;string&lt;/code&gt; 中该使用哪个？当 Phil Haack 提出这个疑问时，有许多人回复。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.hanselman.com/blog/ExploringTheNewNETDotnetCommandLineInterfaceCLI.aspx&#34;&gt;Exploring the new .NET &amp;ldquo;dotnet&amp;rdquo; Command Line Interface (CLI)&lt;/a&gt; : Scott Hanselman与 &lt;a href=&#34;https://dotnet.github.io/&#34;&gt;.NET Core&lt;/a&gt;一起简单介绍了新出现的命令行工具(dotnet)的基本使用方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://spazzarama.com/2015/12/31/fast-shared-array-buffer-and-circular-buffer-ring-buffer-for-dotnet-ipc-with-memory-mapped-files/&#34;&gt;Fast shared Array, Buffer and Circular Buffer / Ring Buffer for .NET IPC with Memory Mapped Files&lt;/a&gt; : Justin Stenning介绍了SharedMemory library，它可以让 .NET 中的许多 Process 之间像 Array, Buffer, Circular Buffer 一样的资料结构相互进行共享。内部使用的 IPC(Inter-process communication) 技术为 memory-map。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.kunal-chowdhury.com/2016/01/csharp-basics.html&#34;&gt;Evolution of C#&lt;/a&gt; : Kunal Chowdhury 用一个表整理了从 C# 1.0~ 6.0 的变化。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;asp-net-消息:fc9e1c937c4cd04790f433d6effbc270&#34;&gt;ASP.NET 消息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.dotnetcurry.com/aspnet/1223/secure-aspnet-web-api-using-tokens-owin-angularjs&#34;&gt;Secure ASP.NET Web API using token-based authentication and using it in an Angular application&lt;/a&gt; : Mahesh Sabnis说明了联动Angular.js和ASP.NET Web API时，该如何处理Token基础的认证。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blogs.msdn.com/b/abhinaba/archive/2015/12/22/publishing-a-asp-net-5-web-application-to-iis-locally.aspx&#34;&gt;Publishing a ASP.NET 5 Web-Application to IIS Locally&lt;/a&gt; : Abhinaba Basu说明了怎么将ASP.NET 5 Web Application发布到本地IIS服务器中&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.simple-talk.com/dotnet/asp.net/how-to-take-an-asp.net-mvc-web-site-down-for-maintenance/&#34;&gt;How to take an ASP.NET MVC web site down for maintenance&lt;/a&gt; : Jon smith 共享了，为进行维护需要暂停 ASP.NET MVC 网站时的一些疑问以及自己的处理秘诀。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blogs.taiga.nl/martijn/2015/12/10/develop-reactjs-asp-net-web-api-apps-in-visual-studio-2015/&#34;&gt;Develop ReactJS + ASP.NET Web API apps in Visual Studio 2015&lt;/a&gt; : Martijn Boland 介绍了用 Visual Studio 2015 开发 ReactJS 和 ASP.NET Web API Web Application的经验。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他:fc9e1c937c4cd04790f433d6effbc270&#34;&gt;其他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.developerdrive.com/2015/12/what-you-need-to-know-about-bootstrap-4/&#34;&gt;What you need to know about Bootstrap 4&lt;/a&gt; : 使用 ASP.NET 进行开发时，离不开 Bootstrap。Ezequiel Bruni 说明了使用Bootstrap 前需要的知识点。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://mojs.io/&#34;&gt;mo.js&lt;/a&gt;: Mary Lou在 &lt;a href=&#34;http://tympanus.net/codrops/2016/02/23/icon-animations-powered-by-mo-js/&#34;&gt;Icon Animations Powered by mo.js&lt;/a&gt; 中介绍了 JavaScript Animation Library：&lt;a href=&#34;http://mojs.io/&#34;&gt;mo.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>